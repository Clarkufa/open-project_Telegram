const express = require('express');
const sqlite3 = require('sqlite3').verbose();
const bodyParser = require('body-parser');
const TelegramBot = require('node-telegram-bot-api');

const TELEGRAM_BOT_TOKEN = '';
const PORT = 3778;
const DB_PATH = './user_mapping.db';


const app = express();
const bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: true });


app.use(bodyParser.json());


const db = new sqlite3.Database(DB_PATH, (err) => {
    if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err);
    } else {
        db.run(`CREATE TABLE IF NOT EXISTS user_mapping (
            telegram_user_id TEXT PRIMARY KEY,
            open_project_username TEXT
        )`, (err) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã:', err);
            }
        });
    }
});

app.post('/tghook', (req, res) => {
    try {
        const data = req.body;
        const action = data?.action;
        const taskStatus = action === 'work_package:created' ? '—Å–æ–∑–¥–∞–Ω–∞' : action === 'work_package:updated' ? '–æ–±–Ω–æ–≤–ª–µ–Ω–∞' : null;
        if (!taskStatus) {
            return res.status(200).json({ status: '–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è' });
        }

        const priority = data?.work_package?._embedded.priority?.name || '–ù–µ —É–∫–∞–∑–∞–Ω';
        const project = data?.work_package?._embedded.project?.name || '–ù–µ —É–∫–∞–∑–∞–Ω';
        const authorUsername = data?.work_package?._embedded.author?.login || null;
        const assignedUsername = data?.work_package?._embedded.assignee?.login || null;
        const taskSubject = data?.work_package?.subject || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
        //const taskDescription = data?.work_package?.description?.raw || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
        const taskId = data?.work_package?.id || '–ù–µ —É–∫–∞–∑–∞–Ω';
        const projectId = data?.work_package?._embedded.project?.id || '–ù–µ —É–∫–∞–∑–∞–Ω';


        const taskLink = `https://helpdesk.voice-robotics.ru/projects/${projectId}/work_packages/${taskId}/activity`;

        const sendNotification = (telegramUserId, role) => {
            const message = `üîî <b>–ó–∞–¥–∞—á–∞ ${taskStatus}</b>\n\n` +
                `<b>ID –∑–∞–¥–∞—á–∏:</b> ${taskId}\n` +
                `<b>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:</b> ${priority}\n` +
                `<b>–ü—Ä–æ–µ–∫—Ç:</b> ${project}\n` +
                `<b>–†–æ–ª—å:</b> ${role}\n` +
                `<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> ${taskSubject}\n` +
                `<b>–°—Å—ã–ª–∫–∞:</b> <a href=\"${taskLink}\">${taskLink}</a>\n`;
                //`<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${taskDescription}`

            bot.sendMessage(telegramUserId, message, { parse_mode: 'HTML' })
                .catch((err) => console.error('–û—à–∏–±–∫–∞ Telegram API:', err));
        };


        if (assignedUsername) {
            db.get('SELECT telegram_user_id FROM user_mapping WHERE open_project_username = ?', [assignedUsername], (err, row) => {
                if (err) {
                    console.error('–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å):', err);
                } else if (row) {
                    sendNotification(row.telegram_user_id, '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å');
                }
            });
        }


        if (authorUsername) {
            db.get('SELECT telegram_user_id FROM user_mapping WHERE open_project_username = ?', [authorUsername], (err, row) => {
                if (err) {
                    console.error('–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–∞–≤—Ç–æ—Ä):', err);
                } else if (row) {
                    sendNotification(row.telegram_user_id, '–ê–≤—Ç–æ—Ä');
                }
            });
        }

        res.status(200).json({ status: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã (–µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏).' });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞:', err);
        res.status(500).json({ status: '–û—à–∏–±–∫–∞', details: err.message });
    }
});


app.get('/', (req, res) => {
    res.send('–ü—Ä–∏–≤–µ—Ç');
});


bot.onText(/\/start/, (msg) => {
    bot.sendMessage(msg.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è OpenProject, —á—Ç–æ–±—ã —è –º–æ–≥ —Å–≤—è–∑–∞—Ç—å –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç.');
});

bot.on('message', (msg) => {
    if (msg.text.startsWith('/') || msg.from.is_bot) {
        return;
    }

    const telegramUserId = msg.chat.id.toString();
    const openProjectUsername = msg.text;

    db.run('REPLACE INTO user_mapping (telegram_user_id, open_project_username) VALUES (?, ?)', [telegramUserId, openProjectUsername], (err) => {
        if (err) {
            console.error('–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err);
            bot.sendMessage(msg.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        } else {
            bot.sendMessage(msg.chat.id, '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!');
        }
    });
});

app.listen(PORT, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
